# admin_router.py

from aiogram import html, F, Router
from aiogram.filters import BaseFilter, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.config import ADMINS_LIST
from src.database import db # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –æ–±—ä–µ–∫—Ç –ë–î
from src.states import AdminP2PStates # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è

admin_router = Router()

class IsAdmin(BaseFilter):
    def __init__(self) -> None:
        self.admin_ids = ADMINS_LIST
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in self.admin_ids

"""@admin_router.message(IsAdmin(), Command('start'))
async def admin_start_handler(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {html.bold(message.from_user.full_name)}!")"""

@admin_router.message(IsAdmin(), Command('admin'))
async def admin_handler(message: Message) -> None:
    builder = InlineKeyboardBuilder()
    builder.button(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ P2P", callback_data="admin_p2p_manage")
    # –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    builder.adjust(1)
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=builder.as_markup())

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ P2P ---

@admin_router.callback_query(IsAdmin(), F.data == "admin_p2p_manage")
async def p2p_manage_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É", callback_data="admin_p2p_add_pair")
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É", callback_data="admin_p2p_remove_pair")
    builder.button(text="üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞–º–∏", callback_data="admin_p2p_manage_listings")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin_panel")
    builder.adjust(2, 1, 1)
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ P2P-–æ–±–º–µ–Ω–Ω–∏–∫–æ–º:", reply_markup=builder.as_markup())

@admin_router.callback_query(IsAdmin(), F.data == "back_to_admin_panel")
async def back_to_admin_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await admin_handler(callback.message) # –í—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∫–∏
    await callback.answer()


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã ---

@admin_router.callback_query(IsAdmin(), F.data == "admin_p2p_add_pair")
async def add_pair_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminP2PStates.waiting_for_pair_to_add)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –í–ê–õ–Æ–¢–ê1_–í–ê–õ–Æ–¢–ê2 (–Ω–∞–ø—Ä–∏–º–µ—Ä, TON_RUB).")
    await callback.answer()

@admin_router.message(IsAdmin(), AdminP2PStates.waiting_for_pair_to_add)
async def add_pair_process(message: Message, state: FSMContext):
    pair_name = message.text.upper()
    if db.add_p2p_pair(pair_name):
        await message.answer(f"‚úÖ –ü–∞—Ä–∞ {pair_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        await message.answer(f"‚ö†Ô∏è –ü–∞—Ä–∞ {pair_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    await state.clear()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è P2P
    # –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω—É–∂–µ–Ω –æ–±—ä–µ–∫—Ç CallbackQuery, –Ω–æ —É –Ω–∞—Å –µ–≥–æ –Ω–µ—Ç.
    # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–µ–º –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ.
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é P2P", callback_data="admin_p2p_manage")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup())


# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã ---

@admin_router.callback_query(IsAdmin(), F.data == "admin_p2p_remove_pair")
async def remove_pair_start(callback: CallbackQuery, state: FSMContext):
    pairs = db.get_all_p2p_pairs()
    if not pairs:
        await callback.answer("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()
    for pair in pairs:
        builder.button(text=f"‚ùå {pair}", callback_data=f"confirm_remove_pair_{pair}")
    builder.button(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_p2p_manage")
    builder.adjust(1)
    await state.set_state(AdminP2PStates.waiting_for_pair_to_remove)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())

@admin_router.callback_query(IsAdmin(), AdminP2PStates.waiting_for_pair_to_remove, F.data.startswith("confirm_remove_pair_"))
async def remove_pair_confirm(callback: CallbackQuery, state: FSMContext):
    pair_name = callback.data.split('_', 3)[-1]
    db.remove_p2p_pair(pair_name)
    await callback.answer(f"–ü–∞—Ä–∞ {pair_name} –∏ –≤—Å–µ –µ–µ –ª–∏—Å—Ç–∏–Ω–≥–∏ —É–¥–∞–ª–µ–Ω—ã.", show_alert=True)
    await state.clear()
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    await p2p_manage_menu(callback, state)


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞–º–∏ ---

@admin_router.callback_query(IsAdmin(), F.data == "admin_p2p_manage_listings")
async def manage_listings_start(callback: CallbackQuery, state: FSMContext):
    pairs = db.get_all_p2p_pairs()
    if not pairs:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É.", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    for pair in pairs:
        builder.button(text=pair, callback_data=f"select_listing_pair_{pair}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_p2p_manage")
    builder.adjust(2)
    await state.set_state(AdminP2PStates.choosing_pair_for_listing)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–∞–º–∏:", reply_markup=builder.as_markup())

@admin_router.callback_query(IsAdmin(), AdminP2PStates.choosing_pair_for_listing, F.data.startswith("select_listing_pair_"))
async def select_listing_pair(callback: CallbackQuery, state: FSMContext):
    pair_name = callback.data.split('_', 3)[-1]
    await state.update_data(current_pair=pair_name)
    
    listings = db.get_p2p_listings(pair_name)
    text = f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞–º–∏ –¥–ª—è –ø–∞—Ä—ã *{pair_name}*\n\n"
    if not listings:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Å—Ç–∏–Ω–≥–æ–≤."
    else:
        text += "–¢–µ–∫—É—â–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∏:\n"
        for l in listings:
            text += f"ID: `{l['id']}` | {l['nickname']} | {l['action']} | {l['price']} | –õ–∏–º–∏—Ç: {l['limit']}\n"
            
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏—Å—Ç–∏–Ω–≥", callback_data="add_listing_start")
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ª–∏—Å—Ç–∏–Ω–≥", callback_data="remove_listing_start")
    builder.button(text="‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø–∞—Ä—É", callback_data="admin_p2p_manage_listings")
    builder.adjust(2, 1)
    
    await state.set_state(AdminP2PStates.choosing_listing_action)
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="Markdown")


# --- –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞ ---

@admin_router.callback_query(IsAdmin(), AdminP2PStates.choosing_listing_action, F.data == "remove_listing_start")
async def remove_listing_start(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    pair_name = data.get("current_pair")
    listings = db.get_p2p_listings(pair_name)
    
    if not listings:
        await callback.answer("–ù–µ—Ç –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–π –ø–∞—Ä–µ.", show_alert=True)
        return
        
    builder = InlineKeyboardBuilder()
    for l in listings:
        builder.button(
            text=f"‚ùå ID: {l['id']} ({l['nickname']})", 
            callback_data=f"confirm_remove_listing_{l['id']}"
        )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_listing_pair_{pair_name}")
    builder.adjust(1)
    
    await state.set_state(AdminP2PStates.waiting_for_listing_to_remove)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç–∏–Ω–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())


@admin_router.callback_query(IsAdmin(), AdminP2PStates.waiting_for_listing_to_remove, F.data.startswith("confirm_remove_listing_"))
async def remove_listing_confirm(callback: CallbackQuery, state: FSMContext):
    listing_id = int(callback.data.split('_')[-1])
    db.remove_p2p_listing(listing_id)
    await callback.answer("–õ–∏—Å—Ç–∏–Ω–≥ —É–¥–∞–ª–µ–Ω.", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–∞–º–∏ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
    await select_listing_pair(callback, state)


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞ (—Ü–µ–ø–æ—á–∫–∞ FSM) ---

@admin_router.callback_query(IsAdmin(), AdminP2PStates.choosing_listing_action, F.data == "add_listing_start")
async def add_listing_nickname(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminP2PStates.waiting_for_listing_nickname)
    await callback.message.edit_text("–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø—Ä–æ–¥–∞–≤—Ü–∞/–ø–æ–∫—É–ø–∞—Ç–µ–ª—è.")
    await callback.answer()

@admin_router.message(IsAdmin(), AdminP2PStates.waiting_for_listing_nickname)
async def add_listing_price(message: Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await state.set_state(AdminP2PStates.waiting_for_listing_price)
    await message.answer("–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '4.40594$' –∏–ª–∏ '0.0001 BTC').")

@admin_router.message(IsAdmin(), AdminP2PStates.waiting_for_listing_price)
async def add_listing_limit(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await state.set_state(AdminP2PStates.waiting_for_listing_limit)
    await message.answer("–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 TON').")

@admin_router.message(IsAdmin(), AdminP2PStates.waiting_for_listing_limit)
async def add_listing_action(message: Message, state: FSMContext):
    await state.update_data(limit=message.text)
    await state.set_state(AdminP2PStates.waiting_for_listing_action)
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–¥–∞–∂–∞", callback_data="add_listing_action_–ø—Ä–æ–¥–∞–∂–∞")
    builder.button(text="–ü–æ–∫—É–ø–∫–∞", callback_data="add_listing_action_–ø–æ–∫—É–ø–∫–∞")
    await message.answer("–®–∞–≥ 4/4: –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup())

@admin_router.callback_query(IsAdmin(), AdminP2PStates.waiting_for_listing_action, F.data.startswith("add_listing_action_"))
async def add_listing_finish(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split('_')[-1]
    await state.update_data(action=action)
    
    data = await state.get_data()
    db.add_p2p_listing(
        pair_name=data['current_pair'],
        nickname=data['nickname'],
        price=data['price'],
        limit=data['limit'],
        action=data['action']
    )
    
    await callback.message.edit_text(f"‚úÖ –õ–∏—Å—Ç–∏–Ω–≥ –¥–ª—è –ø–∞—Ä—ã {data['current_pair']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await callback.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–∞–º–∏ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
    await select_listing_pair(callback, state)