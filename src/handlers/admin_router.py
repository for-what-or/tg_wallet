from aiogram import html, F, Router
from aiogram.filters import BaseFilter, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from src.locales import translator

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ---
from src.config import ADMINS_LIST, ADMIN_GROUPS, CAN_EDIT_USERS
from src.database import db # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –æ–±—ä–µ–∫—Ç –ë–î
from src.states import AdminP2PStates, AdminUserManagement # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–∞ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π

admin_router = Router()

class IsAdmin(BaseFilter):
    def __init__(self) -> None:
        self.admin_ids = ADMINS_LIST
        self.admin_groups = ADMIN_GROUPS
    async def __call__(self, event: Message | CallbackQuery) -> bool:
        user_id = event.from_user.id
        chat_id = 0
        if isinstance(event, Message) and event.chat:
            chat_id = event.chat.id
        elif isinstance(event, CallbackQuery) and event.message and event.message.chat:
            chat_id = event.message.chat.id
        return user_id in self.admin_ids or chat_id in self.admin_groups


@admin_router.message(IsAdmin(), Command('admin'))
@admin_router.callback_query(IsAdmin(), F.data == "back_to_admin_panel")
async def admin_handler(event: Message | CallbackQuery, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    builder.button(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ P2P", callback_data="admin_p2p_manage")
    builder.button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_user_manage")
    builder.adjust(1)
    
    text = "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:"
    if isinstance(event, CallbackQuery):
        await event.message.edit_text(text, reply_markup=builder.as_markup())
        await event.answer()
    else:
        await event.answer(text, reply_markup=builder.as_markup())


# ######################################################################
# <<< –ë–õ–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò >>>
# ######################################################################

@admin_router.callback_query(IsAdmin(), F.data == "admin_user_manage")
async def user_manage_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminUserManagement.waiting_for_user_id)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@admin_router.message(IsAdmin(), AdminUserManagement.waiting_for_user_id)
async def user_id_received(message: Message, state: FSMContext):
    if not message.text or not message.text.isdigit():
        await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id = int(message.text)
    user_data = db.get_user_data(user_id)

    if not user_data:
        await message.answer(f"‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await state.update_data(current_user_id=user_id)
    await show_user_profile(message, state, user_id)


async def show_user_profile(event: Message | CallbackQuery, state: FSMContext, user_id: int):
    """–•–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_data = db.get_user_data(user_id)
    if not user_data:
        text_error = f"‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}."
        if isinstance(event, Message):
            await event.answer(text_error)
        else:
            await event.message.edit_text(text_error)
        return
    
    escaped_username = user_data.get('username', 'N/A').replace('_', '\\_')

    profile_text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{user_data['user_id']}`\n\n"
    profile_text += f"‚ñ™Ô∏è Username: @{escaped_username}\n"
    profile_text += f"‚ñ™Ô∏è Full Name: {html.quote(user_data.get('full_name', 'N/A'))}\n"
    profile_text += f"‚ñ™Ô∏è –Ø–∑—ã–∫: {user_data.get('language', 'N/A')}\n"
    profile_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: `{user_data.get('balance', 0)}`\n"
    profile_text += f"ü§ù –°–¥–µ–ª–æ–∫: `{user_data.get('deals_count', 0)}`\n"
    profile_text += f"üó£Ô∏è –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: `{user_data.get('ref_count', 0)}`\n"
    profile_text += f"üí≥ –ö–∞—Ä—Ç–∞: `{user_data.get('card_number') or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`\n"
    profile_text += f"üíé TON Mainnet: `{user_data.get('ton_wallet') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}`\n"

    builder = InlineKeyboardBuilder()
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ---
    if CAN_EDIT_USERS:
        fields_to_edit = {
            "balance": "üí∞ –ë–∞–ª–∞–Ω—Å", "deals_count": "ü§ù –°–¥–µ–ª–∫–∏", "ref_count": "üó£Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—ã",
            "card_number": "üí≥ –ö–∞—Ä—Ç–∞", "ton_wallet": "üíé TON Mainnet", "ton_wallet_test": "üß™ TON Testnet",
            "language": "üåê –Ø–∑—ã–∫"
        }
        for field, text in fields_to_edit.items():
            builder.button(text=f"‚úèÔ∏è {text}", callback_data=f"edit_user_{field}")
        builder.adjust(2)

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É ID", callback_data="admin_user_manage"))

    await state.set_state(AdminUserManagement.viewing_user_profile)
    
    if isinstance(event, Message):
        await event.answer(profile_text, reply_markup=builder.as_markup(), parse_mode='Markdown')
    elif isinstance(event, CallbackQuery):
        await event.message.edit_text(profile_text, reply_markup=builder.as_markup(), parse_mode='Markdown')
        await event.answer()


@admin_router.callback_query(IsAdmin(), AdminUserManagement.viewing_user_profile, F.data.startswith("edit_user_"))
async def edit_user_field_start(callback: CallbackQuery, state: FSMContext):
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    if not CAN_EDIT_USERS:
        await callback.answer("‚õîÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–æ.", show_alert=True)
        return

    field_to_edit = callback.data.split("edit_user_")[-1]
    
    await state.update_data(field_to_edit=field_to_edit)
    await state.set_state(AdminUserManagement.editing_field)

    prompts = {
        "balance": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å (—á–∏—Å–ª–æ):",
        "deals_count": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
        "ref_count": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
        "card_number": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–∏–ª–∏ 'None' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏):",
        "ton_wallet": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ TON Mainnet (–∏–ª–∏ 'None' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏):",
        "ton_wallet_test": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ TON Testnet (–∏–ª–∏ 'None' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏):",
        "language": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —è–∑—ã–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ru –∏–ª–∏ en):"
    }
    
    builder = InlineKeyboardBuilder()
    data = await state.get_data()
    builder.button(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_{data.get('current_user_id')}")

    await callback.message.edit_text(
        f"‚úèÔ∏è {prompts.get(field_to_edit, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@admin_router.callback_query(IsAdmin(), AdminUserManagement.editing_field, F.data.startswith("cancel_edit_"))
async def edit_user_field_cancel(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split('_')[-1])
    await callback.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_user_profile(callback, state, user_id)


@admin_router.message(IsAdmin(), AdminUserManagement.editing_field)
async def edit_user_field_process(message: Message, state: FSMContext):
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ---
    if not CAN_EDIT_USERS:
        return # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ

    data = await state.get_data()
    user_id = data.get("current_user_id")
    field = data.get("field_to_edit")
    new_value_str = message.text

    if new_value_str.lower() == 'none':
        new_value = None
    else:
        new_value = new_value_str

    if field in ["balance"] and new_value is not None:
        try:
            new_value = float(new_value_str)
        except ValueError:
            await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞: –ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    elif field in ["deals_count", "ref_count"] and new_value is not None:
        if not new_value_str.isdigit():
            await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞: –≠—Ç–æ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        new_value = int(new_value_str)

    db.update_user_data(user_id, {field: new_value})
    
    await message.answer(f"‚úÖ –ü–æ–ª–µ `{field}` –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    
    await show_user_profile(message, state, user_id)


# ######################################################################
# <<< –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò >>>
# ######################################################################


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ P2P ---
# (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

@admin_router.callback_query(IsAdmin(), F.data == "admin_p2p_manage")
async def p2p_manage_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É", callback_data="admin_p2p_add_pair")
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É", callback_data="admin_p2p_remove_pair")
    builder.button(text="üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞–º–∏", callback_data="admin_p2p_manage_listings")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin_panel")
    builder.adjust(2, 1, 1)
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ P2P-–æ–±–º–µ–Ω–Ω–∏–∫–æ–º:", reply_markup=builder.as_markup())


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã ---

@admin_router.callback_query(IsAdmin(), F.data == "admin_p2p_add_pair")
async def add_pair_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminP2PStates.waiting_for_pair_to_add)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –í–ê–õ–Æ–¢–ê1_–í–ê–õ–Æ–¢–ê2 (–Ω–∞–ø—Ä–∏–º–µ—Ä, TON_RUB).")
    await callback.answer()

@admin_router.message(IsAdmin(), AdminP2PStates.waiting_for_pair_to_add)
async def add_pair_process(message: Message, state: FSMContext):
    pair_name = message.text.upper()
    if db.add_p2p_pair(pair_name):
        await message.answer(f"‚úÖ –ü–∞—Ä–∞ {pair_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        await message.answer(f"‚ö†Ô∏è –ü–∞—Ä–∞ {pair_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    await state.clear()
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é P2P", callback_data="admin_p2p_manage")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup())


# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã ---

@admin_router.callback_query(IsAdmin(), F.data == "admin_p2p_remove_pair")
async def remove_pair_start(callback: CallbackQuery, state: FSMContext):
    pairs = db.get_all_p2p_pairs()
    if not pairs:
        await callback.answer("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()
    for pair in pairs:
        builder.button(text=f"‚ùå {pair}", callback_data=f"confirm_remove_pair_{pair}")
    builder.button(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_p2p_manage")
    builder.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())

@admin_router.callback_query(IsAdmin(), F.data.startswith("confirm_remove_pair_"))
async def remove_pair_confirm(callback: CallbackQuery, state: FSMContext):
    pair_name = callback.data.split('_', 3)[-1]
    db.remove_p2p_pair(pair_name)
    await callback.answer(f"–ü–∞—Ä–∞ {pair_name} –∏ –≤—Å–µ –µ–µ –ª–∏—Å—Ç–∏–Ω–≥–∏ —É–¥–∞–ª–µ–Ω—ã.", show_alert=True)
    await state.clear()
    await p2p_manage_menu(callback, state)


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞–º–∏ ---

@admin_router.callback_query(IsAdmin(), F.data == "admin_p2p_manage_listings")
async def manage_listings_start(callback: CallbackQuery, state: FSMContext):
    pairs = db.get_all_p2p_pairs()
    if not pairs:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É.", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    for pair in pairs:
        builder.button(text=pair, callback_data=f"select_listing_pair_{pair}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_p2p_manage")
    builder.adjust(2)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–∞–º–∏:", reply_markup=builder.as_markup())

@admin_router.callback_query(IsAdmin(), F.data.startswith("select_listing_pair_"))
async def select_listing_pair(callback: CallbackQuery, state: FSMContext):
    pair_name = callback.data.split('_', 3)[-1]
    await state.update_data(current_pair=pair_name)
    
    listings = db.get_p2p_listings(pair_name)
    text = f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞–º–∏ –¥–ª—è –ø–∞—Ä—ã *{pair_name}*\n\n"
    if not listings:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Å—Ç–∏–Ω–≥–æ–≤."
    else:
        text += "–¢–µ–∫—É—â–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∏:\n"
        for l in listings:
            text += f"ID: `{l['id']}` | {l['nickname']} | {l['action']} | {l['price']} | –õ–∏–º–∏—Ç: {l['limit']}\n"
            
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏—Å—Ç–∏–Ω–≥", callback_data="add_listing_start")
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ª–∏—Å—Ç–∏–Ω–≥", callback_data="remove_listing_start")
    builder.button(text="‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø–∞—Ä—É", callback_data="admin_p2p_manage_listings")
    builder.adjust(2, 1)
    
    await state.set_state(AdminP2PStates.choosing_listing_action)
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="Markdown")


# --- –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞ ---

@admin_router.callback_query(IsAdmin(), AdminP2PStates.choosing_listing_action, F.data == "remove_listing_start")
async def remove_listing_start(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    pair_name = data.get("current_pair")
    listings = db.get_p2p_listings(pair_name)
    
    if not listings:
        await callback.answer("–ù–µ—Ç –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–π –ø–∞—Ä–µ.", show_alert=True)
        return
        
    builder = InlineKeyboardBuilder()
    for l in listings:
        builder.button(
            text=f"‚ùå ID: {l['id']} ({l['nickname']})", 
            callback_data=f"confirm_remove_listing_{l['id']}"
        )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_listing_pair_{pair_name}")
    builder.adjust(1)
    
    await state.set_state(AdminP2PStates.waiting_for_listing_to_remove)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç–∏–Ω–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())


@admin_router.callback_query(IsAdmin(), AdminP2PStates.waiting_for_listing_to_remove, F.data.startswith("confirm_remove_listing_"))
async def remove_listing_confirm(callback: CallbackQuery, state: FSMContext):
    listing_id = int(callback.data.split('_')[-1])
    db.remove_p2p_listing(listing_id)
    await callback.answer("–õ–∏—Å—Ç–∏–Ω–≥ —É–¥–∞–ª–µ–Ω.", show_alert=True)
    
    await select_listing_pair(callback, state)


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞ (—Ü–µ–ø–æ—á–∫–∞ FSM) ---

@admin_router.callback_query(IsAdmin(), AdminP2PStates.choosing_listing_action, F.data == "add_listing_start")
async def add_listing_nickname(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminP2PStates.waiting_for_listing_nickname)
    await callback.message.edit_text("–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø—Ä–æ–¥–∞–≤—Ü–∞/–ø–æ–∫—É–ø–∞—Ç–µ–ª—è.")
    await callback.answer()

@admin_router.message(IsAdmin(), AdminP2PStates.waiting_for_listing_nickname)
async def add_listing_price(message: Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await state.set_state(AdminP2PStates.waiting_for_listing_price)
    await message.answer("–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '4.40594$' –∏–ª–∏ '0.0001 BTC').")

@admin_router.message(IsAdmin(), AdminP2PStates.waiting_for_listing_price)
async def add_listing_limit(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await state.set_state(AdminP2PStates.waiting_for_listing_limit)
    await message.answer("–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 TON').")

@admin_router.message(IsAdmin(), AdminP2PStates.waiting_for_listing_limit)
async def add_listing_action(message: Message, state: FSMContext):
    await state.update_data(limit=message.text)
    await state.set_state(AdminP2PStates.waiting_for_listing_action)
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–¥–∞–∂–∞", callback_data="add_listing_action_–ø—Ä–æ–¥–∞–∂–∞")
    builder.button(text="–ü–æ–∫—É–ø–∫–∞", callback_data="add_listing_action_–ø–æ–∫—É–ø–∫–∞")
    await message.answer("–®–∞–≥ 4/4: –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup())

@admin_router.callback_query(IsAdmin(), AdminP2PStates.waiting_for_listing_action, F.data.startswith("add_listing_action_"))
async def add_listing_finish(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split('_')[-1]
    await state.update_data(action=action)
    
    data = await state.get_data()
    db.add_p2p_listing(
        pair_name=data['current_pair'],
        nickname=data['nickname'],
        price=data['price'],
        limit=data['limit'],
        action=data['action']
    )
    
    await callback.message.edit_text(f"‚úÖ –õ–∏—Å—Ç–∏–Ω–≥ –¥–ª—è –ø–∞—Ä—ã {data['current_pair']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await callback.answer()
    
    await select_listing_pair(callback, state)

# --- –ö–æ–º–∞–Ω–¥–∞ /addvip (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) ---
@admin_router.message(Command("addvip"))
async def grant_balance_access(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /addvip, –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    –í—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
    """
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMINS_LIST:
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addvip <user_id> <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–≤_–¥–Ω—è—Ö>")
        return

    try:
        target_user_id = int(args[1])
        duration_days = int(args[2])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    # –í—ã–¥–∞—á–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.grant_balance_permission(target_user_id, duration_days)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id} –≤—ã–¥–∞–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {duration_days} –¥.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        notification_text = translator.get_message('ru', 'balance_permission_granted', duration=duration_days)
        await message.bot.send_message(
            chat_id=target_user_id,
            text=notification_text,
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")

# --- –ö–æ–º–∞–Ω–¥–∞ /rmvip (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) ---
@admin_router.message(Command("rmvip"))
async def revoke_balance_access(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /rmvip, –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    –ó–∞–±–∏—Ä–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.
    """
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMINS_LIST:
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rmvip <user_id>")
        return

    try:
        target_user_id = int(args[1])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –û—Ç–∑—ã–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.revoke_balance_permission(target_user_id)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id} –æ—Ç–æ–∑–≤–∞–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        notification_text = translator.get_message('ru', 'balance_permission_revoked')
        await message.bot.send_message(
            chat_id=target_user_id,
            text=notification_text,
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
