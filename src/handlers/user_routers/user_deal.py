import re
from aiogram import F, Router, html
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram import types

from src.locales import translator
from src.database import db
from src.states import *
from src.handlers.user_routers.user_main import command_start_handler

router = Router()

@router.callback_query(F.data.in_({'create_deal'}))
async def handle_wallet_required_action(callback: CallbackQuery, state: FSMContext) -> None:
    user_data = db.get_user_data(callback.from_user.id)
    lang = user_data.get('language', 'ru')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è TON-–∫–æ—à–µ–ª—å–∫–∞
    if not user_data.get('ton_wallet'):
        builder = InlineKeyboardBuilder()
        builder.button(text=translator.get_button(lang, 'add_wallet'), callback_data="add_change_wallet")
        builder.adjust(1)
        await callback.message.edit_text(
            translator.get_message(lang, 'wallet_not_added_warning'),
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        return
    
    user_data = db.get_user_data(callback.from_user.id)
    lang = user_data.get('language', 'ru')
    
    builder = InlineKeyboardBuilder()
    builder.button(text=translator.get_button(lang, 'add_ton_wallet'), callback_data="add_recipient_ton_wallet")
    builder.button(text=translator.get_button(lang, 'add_card'), callback_data="add_recipient_card")
    builder.button(text=translator.get_button(lang, 'back'), callback_data="back_to_main")
    builder.adjust(1)

    await callback.message.edit_text(
        translator.get_message(lang, 'p2p_enter_recipient_type'),
        reply_markup=builder.as_markup()
    )
    await state.set_state(P2PStates.waiting_for_recipient_type)
    await callback.answer()


@router.callback_query(P2PStates.waiting_for_recipient_type, F.data == "add_recipient_ton_wallet")
async def add_recipient_ton_wallet_handler(callback: CallbackQuery, state: FSMContext) -> None:
    user_data = db.get_user_data(callback.from_user.id)
    lang = user_data.get('language', 'ru')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥", –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    builder = InlineKeyboardBuilder()
    builder.button(text=translator.get_button(lang, 'back'), callback_data="create_deal")
    builder.adjust(1)

    await callback.message.edit_text(
        translator.get_message(lang, 'p2p_enter_recipient_wallet'),
        reply_markup=builder.as_markup()
    )
    await state.set_state(P2PStates.waiting_for_recipient_wallet)
    await state.update_data(recipient_type='ton_wallet')
    await callback.answer()

@router.callback_query(P2PStates.waiting_for_recipient_type, F.data == "add_recipient_card")
async def add_recipient_card_handler(callback: CallbackQuery, state: FSMContext) -> None:
    user_data = db.get_user_data(callback.from_user.id)
    lang = user_data.get('language', 'ru')
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥", –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    builder = InlineKeyboardBuilder()
    builder.button(text=translator.get_button(lang, 'back'), callback_data="create_deal")
    builder.adjust(1)

    await callback.message.edit_text(
        translator.get_message(lang, 'p2p_enter_recipient_card'),
        reply_markup=builder.as_markup()
    )
    await state.set_state(P2PStates.waiting_for_recipient_card)
    await state.update_data(recipient_type='card')
    await callback.answer()

@router.message(P2PStates.waiting_for_recipient_wallet, F.text)
async def process_recipient_ton_wallet(message: Message, state: FSMContext) -> None:
    user_data = db.get_user_data(message.from_user.id)
    lang = user_data.get('language', 'ru')
    wallet_address = message.text
    
    if not re.match(r'^[a-zA-Z0-9_-]{48}$', wallet_address):
        await message.answer(translator.get_message(lang, 'wallet_validation_error'))
        return
    
    await state.update_data(recipient_address=wallet_address)
    await message.answer(translator.get_message(lang, 'p2p_wallet_added_success'))
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –≤ TON
    await message.answer(translator.get_message(lang, 'p2p_enter_ton_amount'))
    # --- /–ò–ó–ú–ï–ù–ï–ù–ò–ï ---
    
    await state.set_state(P2PStates.waiting_for_amount)

@router.message(P2PStates.waiting_for_recipient_card, F.text)
async def process_recipient_card(message: Message, state: FSMContext) -> None:
    user_data = db.get_user_data(message.from_user.id)
    lang = user_data.get('language', 'ru')
    card_number = message.text.replace(' ', '')
    
    if not re.match(r'^\d{16}$', card_number):
        await message.answer(translator.get_message(lang, 'card_validation_error'))
        return

    await state.update_data(recipient_address=card_number)
    await message.answer(translator.get_message(lang, 'p2p_card_added_success'))
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –≤ RUB
    await message.answer(translator.get_message(lang, 'p2p_enter_rub_amount'))
    # --- /–ò–ó–ú–ï–ù–ï–ù–ò–ï ---
    
    await state.set_state(P2PStates.waiting_for_amount)


@router.message(P2PStates.waiting_for_amount, F.text)
async def process_deal_amount(message: Message, state: FSMContext) -> None:
    user_data = db.get_user_data(message.from_user.id)
    lang = user_data.get('language', 'ru')
    
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer(translator.get_message(lang, 'p2p_invalid_amount'))
        return
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ ---
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balance = float(user_data.get('balance', 0))
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏
    if amount > user_balance:
        await message.answer(translator.get_message(lang, 'p2p_insufficient_balance'))
        return
    # --- /–ò–ó–ú–ï–ù–ï–ù–ò–ï ---

    await state.update_data(amount=amount)
    data = await state.get_data()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    currency_symbol = 'TON' if data.get('recipient_type') == 'ton_wallet' else '–†—É–±–ª–µ–π'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = translator.get_message(lang, 'p2p_confirm_deal_header') + "\n\n"
    confirmation_text += f"**{translator.get_message(lang, 'p2p_recipient_type')}:** {data['recipient_type'].replace('ton_wallet', translator.get_button(lang, 'add_ton_wallet')).replace('card', translator.get_button(lang, 'add_card'))}\n"
    confirmation_text += f"**{translator.get_message(lang, 'p2p_recipient_address')}:** `{data['recipient_address']}`\n"
    confirmation_text += f"**{translator.get_message(lang, 'p2p_transfer_amount')}:** {data['amount']} {currency_symbol}"
    
    builder = InlineKeyboardBuilder()
    builder.button(text=translator.get_button(lang, 'p2p_confirm'), callback_data="confirm_deal")
    builder.button(text=translator.get_button(lang, 'p2p_decline'), callback_data="decline_deal")
    builder.adjust(2)
    
    await message.answer(confirmation_text, reply_markup=builder.as_markup(), parse_mode="Markdown")
    await state.set_state(P2PStates.waiting_for_confirmation)


@router.callback_query(P2PStates.waiting_for_confirmation, F.data == "confirm_deal")
async def confirm_deal_handler(callback: CallbackQuery, state: FSMContext) -> None:
    user_data = db.get_user_data(callback.from_user.id)
    lang = user_data.get('language', 'ru')
    data = await state.get_data()
    
    # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏.
    # 1. –ù–∞–π—Ç–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ `data['recipient_address']`.
    # 2. –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —Å–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è `data['amount']`.
    # 3. –ó–∞—á–∏—Å–ª–∏—Ç—å —ç—Ç—É —Å—É–º–º—É –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
    # 4. –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ "—Å–ø–∏—Å–∞—Ç—å –≤ –Ω–∏–∫—É–¥–∞" –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –∏ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if data['recipient_type'] == 'ton_wallet':
        currency_name = 'TON'
        address_label = '–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è'
        currency_symbol = 'TON'
    else: # card
        currency_name = 'Rub'
        address_label = '–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è'
        currency_symbol = '–†—É–±–ª–µ–π'
        
    final_confirmation_text = (
        f"‚úÖ *–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω*\n"
        f"–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì24 —á–∞—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏.\n\n"
        f"üîπ **–í–∞–ª—é—Ç–∞:** {currency_name}\n"
        f"üîπ **–°—É–º–º–∞:** {data['amount']} {currency_symbol}\n"
        f"üîπ **{address_label}:** `{data['recipient_address']}`\n\n"
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text=translator.get_button(lang, 'back_to_main'), callback_data="back_to_main")
    builder.adjust(1)
    
    await callback.message.edit_text(final_confirmation_text, reply_markup=builder.as_markup(), parse_mode="Markdown")
    
    await state.clear()
    await callback.answer()


@router.callback_query(P2PStates.waiting_for_confirmation, F.data == "decline_deal")
async def decline_deal_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.edit_text("–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()